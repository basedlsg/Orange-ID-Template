Action: I need to replace the entire current content of the file server/astrologyEngine.ts with the exact code block I will provide. This new code includes critical diagnostic logs at the very beginning to test the Swiss Ephemeris setup immediately when the server starts.

Please replace the entire content of server/astrologyEngine.ts with this:

// server/astrologyEngine.ts
import swisseph from 'swisseph';
import { DateTime } from 'luxon';
import path from 'path';
import fs from 'fs';

console.log('----------------------------------------------------------');
console.log('[astrologyEngine] TOP OF MODULE - EXECUTION STARTED (V2_FINAL_ATTEMPT_LOG)');
console.log('----------------------------------------------------------');

let ephePath = '';
let swissephInitializedCorrectly = false;

try {
    const projectRoot = process.cwd();
    console.log(`[astrologyEngine] process.cwd() resolved to: ${projectRoot}`);
    
    ephePath = path.join(projectRoot, 'server', 'ephe');
    console.log(`[astrologyEngine] Intended ephemeris path: ${ephePath}`);

    if (!fs.existsSync(ephePath)) {
        console.error(`[astrologyEngine] FILESYSTEM CHECK FAILED: Ephemeris directory ${ephePath} DOES NOT EXIST.`);
    } else {
        console.log(`[astrologyEngine] Filesystem check: Ephemeris directory ${ephePath} exists.`);
        const filesInEphePath = fs.readdirSync(ephePath);
        console.log(`[astrologyEngine] Files found directly in ${ephePath}: [${filesInEphePath.join(', ')}]`);
        if (!filesInEphePath.some(file => file.toLowerCase().endsWith('.se1'))) {
            console.warn(`[astrologyEngine] WARNING: No .SE1 files directly found in ${ephePath}. Ephemeris data might be missing or in subdirectories not checked by this basic log.`);
        } else {
            console.log(`[astrologyEngine] Found .SE1 files in ${ephePath}.`);
        }
    }

    swisseph.swe_set_ephe_path(ephePath);
    console.log(`[astrologyEngine] swisseph.swe_set_ephe_path('${ephePath}') CALLED.`);

    // Test a simple swisseph call that depends on ephemeris path IMMEDIATELY
    const jdTest = swisseph.swe_julday(2000, 1, 1, 0, swisseph.SE_GREG_CAL);
    console.log(`[astrologyEngine] Test Julian Day for Jan 1, 2000: ${jdTest}`);
    
    const testFlags = 0; // Basic geocentric position
    const testPlanetResult = swisseph.swe_calc_ut(jdTest, swisseph.SE_SUN, testFlags);
    
    console.log(`[astrologyEngine] Test swe_calc_ut for Sun on Jan 1, 2000 result: ${JSON.stringify(testPlanetResult, null, 2)}`);

    if (testPlanetResult && typeof testPlanetResult.longitude === 'number' && !isNaN(testPlanetResult.longitude) && (testPlanetResult.rflag === undefined || testPlanetResult.rflag >= 0)) {
        console.log(`[astrologyEngine] BASIC SWISSEPH TEST PASSED. Ephemeris files likely being read and swisseph C module is functioning. Longitude: ${testPlanetResult.longitude}`);
        swissephInitializedCorrectly = true;
    } else {
        console.error(`[astrologyEngine] CRITICAL SWISSEPH TEST FAILED. Result: ${JSON.stringify(testPlanetResult)}. This indicates ephemeris files likely not read correctly by swisseph OR a deeper issue with the swisseph native module in this environment.`);
        swissephInitializedCorrectly = false;
    }
} catch (e: any) {
    console.error(`[astrologyEngine] CRITICAL ERROR during ephemeris path setup or initial swisseph test call: ${e.message}`, e.stack);
    swissephInitializedCorrectly = false;
}

console.log(`[astrologyEngine] Swisseph Initialized Correctly Flag: ${swissephInitializedCorrectly}`);
console.log('----------------------------------------------------------');

// INTERFACES (ensure these match shared/types.ts if you have one)
interface NatalChartDetails {
  utcDateTime: Date;
  latitude: number;
  longitude: number;
}
interface PlanetPosition { longitude: number; sign: string; positionInSign: number; speed: number; }
interface PlanetDetail { sign: string; longitude: number; positionInSign: number; speed: number; }
interface LongitudeDetail { sign: string; degree: number; fullLongitude: number; }
interface ChartData {
  julianDay?: number;
  sun?: PlanetDetail | null; moon?: PlanetDetail | null; mercury?: PlanetDetail | null; venus?: PlanetDetail | null; mars?: PlanetDetail | null;
  jupiter?: PlanetDetail | null; saturn?: PlanetDetail | null; uranus?: PlanetDetail | null; neptune?: PlanetDetail | null; pluto?: PlanetDetail | null;
  ascendant?: LongitudeDetail | null; midheaven?: LongitudeDetail | null; housesCusps?: number[] | null;
  // aspects?: any[]; 
}

const ZODIAC_SIGNS = ['Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo', 'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'];

function _getLongitudeDetails(longitude: number): LongitudeDetail | null {
  if (!swissephInitializedCorrectly || typeof longitude !== 'number' || isNaN(longitude)) {
    console.error(`[astrologyEngine] _getLongitudeDetails: Aborting due to swisseph init status (${swissephInitializedCorrectly}) or invalid longitude (${longitude}).`);
    return null;
  }
  const signIndex = Math.floor(longitude / 30);
  const sign = ZODIAC_SIGNS[signIndex % 12];
  const degree = longitude % 30;
  return { sign, degree, fullLongitude: longitude };
}

function _calculatePlanetPosition(julDay: number, planetId: number, planetName: string): PlanetPosition | null {
  if (!swissephInitializedCorrectly) {
    console.warn(`[astrologyEngine] _calculatePlanetPosition for ${planetName}: Swisseph not initialized correctly. Skipping calculation.`);
    return null;
  }
  if (typeof julDay !== 'number' || isNaN(julDay)) {
    console.error(`[astrologyEngine] _calculatePlanetPosition for ${planetName}: Invalid Julian Day: ${julDay}`);
    return null;
  }

  const flags = swisseph.SEFLG_SPEED;
  const calcResult = swisseph.swe_calc_ut(julDay, planetId, flags) as any;

  if (calcResult.rflag < 0 || typeof calcResult.longitude !== 'number' || isNaN(calcResult.longitude)) {
    console.error(`[astrologyEngine] _calculatePlanetPosition error for ${planetName} (ID ${planetId}). RFlag: ${calcResult.rflag}, Longitude: ${calcResult.longitude}, Error: ${calcResult.error || 'N/A'}`);
    return null;
  }
  const longitude = calcResult.longitude as number;
  const speed = calcResult.speedLongitude as number;
  const signIndex = Math.floor(longitude / 30);
  const sign = ZODIAC_SIGNS[signIndex % 12];
  const positionInSign = longitude % 30;
  return { longitude, sign, positionInSign, speed };
}

export function calculateNatalChart(details: NatalChartDetails): ChartData {
  console.log('[astrologyEngine] calculateNatalChart called with details:', JSON.stringify(details, null, 2));
  
  const emptyShell: ChartData = { 
    sun: null, moon: null, mercury: null, venus: null, mars: null, jupiter: null, saturn: null, uranus: null, neptune: null, pluto: null,
    ascendant: null, midheaven: null, housesCusps: null,
  };

  if (!swissephInitializedCorrectly) {
    console.error('[astrologyEngine] calculateNatalChart: Swisseph not initialized. Returning empty shell.');
    return emptyShell;
  }

  if (!details || typeof details.latitude !== 'number' || typeof details.longitude !== 'number' || !(details.utcDateTime instanceof Date) || isNaN(details.utcDateTime.getTime())) {
    console.error('[astrologyEngine] calculateNatalChart: Invalid details received. Returning empty shell.', details);
    return emptyShell;
  }

  const { utcDateTime, latitude, longitude } = details;
  const chartData: ChartData = { ...emptyShell }; // Start with the empty shell

  try {
    const luxonDateTime = DateTime.fromJSDate(utcDateTime);
    if (!luxonDateTime.isValid) {
        console.error(`[astrologyEngine] calculateNatalChart: Luxon failed to parse utcDateTime. Reason: ${luxonDateTime.invalidReason}, Explanation: ${luxonDateTime.invalidExplanation}. Returning empty shell.`);
        return emptyShell;
    }

    const year = luxonDateTime.year;
    const month = luxonDateTime.month;
    const day = luxonDateTime.day;
    const hour = luxonDateTime.hour + (luxonDateTime.minute / 60) + (luxonDateTime.second / 3600) + (luxonDateTime.millisecond / 3600000);
    
    const julianDay = swisseph.swe_julday(year, month, day, hour, swisseph.SE_GREG_CAL);
    console.log(`[astrologyEngine] calculateNatalChart: Julian Day UT = ${julianDay}`);
    chartData.julianDay = julianDay;

    if (typeof julianDay !== 'number' || isNaN(julianDay)) {
        console.error('[astrologyEngine] calculateNatalChart: Invalid Julian Day calculated. Returning empty shell.');
        return { ...chartData }; // Return what we have (JD) + empty planets/houses
    }

    const planetIds = {
      sun: swisseph.SE_SUN, moon: swisseph.SE_MOON, mercury: swisseph.SE_MERCURY, venus: swisseph.SE_VENUS, mars: swisseph.SE_MARS,
      jupiter: swisseph.SE_JUPITER, saturn: swisseph.SE_SATURN, uranus: swisseph.SE_URANUS, neptune: swisseph.SE_NEPTUNE, pluto: swisseph.SE_PLUTO,
    };

    for (const [name, id] of Object.entries(planetIds)) {
      (chartData as any)[name] = _calculatePlanetPosition(julianDay, id, name);
    }

    const housesResult = swisseph.swe_houses(julianDay, latitude, longitude, 'P') as any;
    console.log('[astrologyEngine] calculateNatalChart: housesResult from swe_houses:', JSON.stringify(housesResult, null, 2));

    if (housesResult.error || !housesResult.house_cusps || typeof housesResult.ascendant !== 'number' || typeof housesResult.mc !== 'number') {
      console.error('[astrologyEngine] calculateNatalChart: Error calculating houses:', housesResult.error || 'Unknown houses error or data missing.');
      // chartData.ascendant, midheaven, housesCusps remain null from emptyShell
    } else {
      chartData.ascendant = _getLongitudeDetails(housesResult.ascendant);
      chartData.midheaven = _getLongitudeDetails(housesResult.mc);
      chartData.housesCusps = housesResult.house_cusps.slice(0, 12);
    }
  } catch (error: any) {
    console.error('[astrologyEngine] calculateNatalChart: UNEXPECTED ERROR during calculation:', error.message, error.stack);
    return { ...chartData }; // Return whatever we managed to calculate plus empty shell for the rest
  }

  console.log('[astrologyEngine] calculateNatalChart: Final chartData being returned:', JSON.stringify(chartData, null, 2));
  return chartData;
}
Use code with caution.
TypeScript
After Cursor confirms it has replaced the file server/astrologyEngine.ts with this exact code:

YOU MUST MANUALLY VERIFY THE EPHEMERIS FILES ARE IN server/ephe/ IN YOUR REPLIT PROJECT. Drag and drop them there if needed. This is the most common point of failure. Make sure sepl_18.se1, semo_18.se1, and fixstars.cat are there.

STOP and then RUN your Replit project to ensure the server restarts and loads the new astrologyEngine.ts code.

IMMEDIATELY check the REPLIT SERVER CONSOLE after it restarts.

You are looking for the initial block of logs starting with [astrologyEngine] TOP OF MODULE - EXECUTION STARTED (V2_FINAL_ATTEMPT_LOG).

Specifically, the lines:

[astrologyEngine] Files found directly in /home/runner/YOUR_PROJECT_NAME/server/ephe: [sepl_18.se1, semo_18.se1, fixstars.cat] (or similar file list)

And critically: [astrologyEngine] BASIC SWISSEPH TEST PASSED... OR [astrologyEngine] CRITICAL SWISSEPH TEST FAILED...

This is the one log I need now: The server startup logs generated by this specific new version of astrologyEngine.ts.

If the "BASIC SWISSEPH TEST PASSED" log appears: The problem is NOT the ephemeris path or basic swisseph functionality. It means the inputs being passed to calculateNatalChart later (date, time, lat, long) are causing swisseph to fail for those specific calculations. The subsequent logs from within calculateNatalChart (which are also in the code above) will then be key.

If the "CRITICAL SWISSEPH TEST FAILED" or "CRITICAL ERROR during ephemeris path setup" log appears: The swisseph native module is not working correctly in your Replit environment (likely due to binary incompatibility or it still can't internally access the ephemeris files correctly despite fs.existsSync being true).