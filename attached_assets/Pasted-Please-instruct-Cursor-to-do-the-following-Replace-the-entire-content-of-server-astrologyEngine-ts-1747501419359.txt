Please instruct Cursor to do the following: "Replace the entire content of server/astrologyEngine.ts with the following code. This version includes detailed logging to help diagnose why chart data might be empty."

// server/astrologyEngine.ts
import swisseph from 'swisseph';
import { DateTime } from 'luxon';
import path from 'path';
import fs from 'fs'; // Import fs for file checking

// --- BEGINNING OF CRITICAL LOGGING SECTION ---
console.log('[astrologyEngine] Module loaded.');

const ephePath = path.join(process.cwd(), 'server', 'ephe');
console.log(`[astrologyEngine] Attempting to set ephemeris path to: ${ephePath}`);
try {
  swisseph.swe_set_ephe_path(ephePath);
  console.log(`[astrologyEngine] Ephemeris path successfully set via swisseph.swe_set_ephe_path.`);

  // Verify if a key ephemeris file exists (e.g., for planets)
  const planetEpheFile = path.join(ephePath, 'sepl_18.se1'); // Adjust filename if different
  if (fs.existsSync(planetEpheFile)) {
    console.log(`[astrologyEngine] Verified: Planet ephemeris file found at ${planetEpheFile}`);
  } else {
    console.error(`[astrologyEngine] CRITICAL ERROR: Planet ephemeris file NOT FOUND at ${planetEpheFile}. Calculations will fail.`);
  }
} catch (e: any) {
  console.error(`[astrologyEngine] CRITICAL ERROR setting ephemeris path or checking file: ${e.message}`, e);
}
// --- END OF CRITICAL LOGGING SECTION ---


// Interfaces (ensure these match shared/types.ts if you have one)
interface NatalChartDetails {
  utcDateTime: Date;
  latitude: number;
  longitude: number;
}

interface PlanetPosition {
  longitude: number;
  sign: string;
  positionInSign: number;
  speed: number;
}

interface PlanetDetail {
  sign: string;
  longitude: number;
  positionInSign: number;
  speed: number;
}

interface LongitudeDetail {
  sign: string;
  degree: number;
  fullLongitude: number;
}

interface ChartData {
  julianDay?: number; // Make optional initially
  sun?: PlanetDetail | null;
  moon?: PlanetDetail | null;
  mercury?: PlanetDetail | null;
  venus?: PlanetDetail | null;
  mars?: PlanetDetail | null;
  jupiter?: PlanetDetail | null;
  saturn?: PlanetDetail | null;
  uranus?: PlanetDetail | null;
  neptune?: PlanetDetail | null;
  pluto?: PlanetDetail | null;
  ascendant?: LongitudeDetail | null;
  midheaven?: LongitudeDetail | null;
  housesCusps?: number[] | null; // Allow null
  // aspects?: any[]; // Add if you have aspect calculation
}

const ZODIAC_SIGNS = [
  'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',
  'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
];

function _getLongitudeDetails(longitude: number): LongitudeDetail | null {
  if (typeof longitude !== 'number' || isNaN(longitude)) {
    console.error('[astrologyEngine] _getLongitudeDetails received invalid longitude:', longitude);
    return null;
  }
  const signIndex = Math.floor(longitude / 30);
  const sign = ZODIAC_SIGNS[signIndex % 12];
  const degree = longitude % 30;
  return { sign, degree, fullLongitude: longitude };
}

function _calculatePlanetPosition(julDay: number, planetId: number, planetName: string): PlanetPosition | null {
  console.log(`[astrologyEngine] _calculatePlanetPosition called for ${planetName} with Julian Day: ${julDay}`);
  if (typeof julDay !== 'number' || isNaN(julDay)) {
    console.error(`[astrologyEngine] _calculatePlanetPosition for ${planetName}: Invalid Julian Day received: ${julDay}`);
    return null;
  }

  const flags = swisseph.SEFLG_SPEED;
  const calcResult = swisseph.swe_calc_ut(julDay, planetId, flags) as any;

  console.log(`[astrologyEngine] _calculatePlanetPosition for ${planetName} - swisseph.swe_calc_ut result:`, JSON.stringify(calcResult, null, 2));

  if (calcResult.rflag < 0 || typeof calcResult.longitude !== 'number' || isNaN(calcResult.longitude)) {
    const errorMessage = calcResult.error || `Swiss Ephemeris error for planet ${planetName} (ID: ${planetId}), rflag: ${calcResult.rflag}, longitude: ${calcResult.longitude}`;
    console.error(`[astrologyEngine] _calculatePlanetPosition error for ${planetName}: ${errorMessage}`);
    return null;
  }

  const longitude = calcResult.longitude as number;
  const speed = calcResult.speedLongitude as number;

  const signIndex = Math.floor(longitude / 30);
  const sign = ZODIAC_SIGNS[signIndex % 12];
  const positionInSign = longitude % 30;

  const planetData = { longitude, sign, positionInSign, speed };
  console.log(`[astrologyEngine] _calculatePlanetPosition success for ${planetName}:`, JSON.stringify(planetData, null, 2));
  return planetData;
}

export function calculateNatalChart(details: NatalChartDetails): ChartData | null {
  console.log('[astrologyEngine] calculateNatalChart function started.');
  console.log('[astrologyEngine] Received details:', JSON.stringify(details, null, 2));

  if (!details || typeof details.latitude !== 'number' || typeof details.longitude !== 'number' || !(details.utcDateTime instanceof Date) || isNaN(details.utcDateTime.getTime())) {
    console.error('[astrologyEngine] Invalid details received:', details);
    return { planets: [], houses: [], aspects: [] } as any; // Return empty shell on bad input
  }
  console.log('[astrologyEngine] UTC DateTime being used:', details.utcDateTime.toISOString());
  console.log('[astrologyEngine] Latitude being used:', details.latitude);
  console.log('[astrologyEngine] Longitude being used:', details.longitude);

  const { utcDateTime, latitude, longitude } = details;
  const chartData: ChartData = {}; // Initialize as potentially empty

  try {
    const luxonDateTime = DateTime.fromJSDate(utcDateTime);
    if (!luxonDateTime.isValid) {
        console.error(`[astrologyEngine] Luxon failed to parse utcDateTime. Reason: ${luxonDateTime.invalidReason}, Explanation: ${luxonDateTime.invalidExplanation}`);
        return { planets: [], houses: [], aspects: [] } as any; // Return empty shell
    }

    const year = luxonDateTime.year;
    const month = luxonDateTime.month;
    const day = luxonDateTime.day;
    const hour = luxonDateTime.hour + (luxonDateTime.minute / 60) + (luxonDateTime.second / 3600) + (luxonDateTime.millisecond / 3600000);

    console.log(`[astrologyEngine] Date components for Julian Day: Y=${year}, M=${month}, D=${day}, H=${hour}`);
    const julianDay = swisseph.swe_julday(year, month, day, hour, swisseph.SE_GREG_CAL);
    console.log(`[astrologyEngine] Calculated Julian Day (UT): ${julianDay}`);
    chartData.julianDay = julianDay;

    if (typeof julianDay !== 'number' || isNaN(julianDay)) {
        console.error('[astrologyEngine] Invalid Julian Day calculated. Aborting further calculations.');
        return { ...chartData, planets: [], houses: [], aspects: [] } as any; // Return what we have plus empty
    }

    const planetIds = {
      sun: swisseph.SE_SUN,
      moon: swisseph.SE_MOON,
      mercury: swisseph.SE_MERCURY,
      venus: swisseph.SE_VENUS,
      mars: swisseph.SE_MARS,
      jupiter: swisseph.SE_JUPITER,
      saturn: swisseph.SE_SATURN,
      uranus: swisseph.SE_URANUS,
      neptune: swisseph.SE_NEPTUNE,
      pluto: swisseph.SE_PLUTO,
    };

    for (const [name, id] of Object.entries(planetIds)) {
      const position = _calculatePlanetPosition(julianDay, id, name);
      (chartData as any)[name] = position; // Store null if calculation failed
    }

    console.log(`[astrologyEngine] Attempting house calculation with JD=${julianDay}, Lat=${latitude}, Lon=${longitude}`);
    const housesResult = swisseph.swe_houses(julianDay, latitude, longitude, 'P') as any;
    console.log('[astrologyEngine] housesResult from swe_houses:', JSON.stringify(housesResult, null, 2));

    if (housesResult.error || !housesResult.house_cusps || typeof housesResult.ascendant !== 'number' || typeof housesResult.mc !== 'number') {
      console.error('[astrologyEngine] Error calculating houses:', housesResult.error || 'Unknown houses error or data missing from housesResult');
      chartData.ascendant = null;
      chartData.midheaven = null;
      chartData.housesCusps = null;
    } else {
      chartData.ascendant = _getLongitudeDetails(housesResult.ascendant);
      chartData.midheaven = _getLongitudeDetails(housesResult.mc);
      chartData.housesCusps = housesResult.house_cusps.slice(0, 12);
      console.log('[astrologyEngine] Ascendant calculated:', JSON.stringify(chartData.ascendant, null, 2));
      console.log('[astrologyEngine] Midheaven calculated:', JSON.stringify(chartData.midheaven, null, 2));
      console.log('[astrologyEngine] House Cusps (1-12) calculated:', JSON.stringify(chartData.housesCusps, null, 2));
    }
  } catch (error: any) {
    console.error('[astrologyEngine] UNEXPECTED ERROR during chart calculation:', error.message, error.stack);
    // Ensure a shell object is returned even on unexpected errors
    return { 
        julianDay: chartData.julianDay || undefined, 
        // Ensure all planet keys exist, even if null
        sun: null, moon: null, mercury: null, venus: null, mars: null, jupiter: null, saturn: null, uranus: null, neptune: null, pluto: null,
        ascendant: null, midheaven: null, housesCusps: null, 
        // aspects: [] 
    } as ChartData;
  }

  console.log('[astrologyEngine] Final chartData being returned:', JSON.stringify(chartData, null, 2));
  return chartData;
}
