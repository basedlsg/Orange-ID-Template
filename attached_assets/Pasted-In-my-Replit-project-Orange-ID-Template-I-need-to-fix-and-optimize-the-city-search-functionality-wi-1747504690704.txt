In my Replit project Orange-ID-Template, I need to fix and optimize the city search functionality within the Command component in client/src/pages/natal-chart.tsx. The goal is to ensure users can search through the entire list of cities fetched from GET /api/cities smoothly, with debouncing to prevent lag, and appropriate display limiting.

Current State:

The full list of cities is fetched into a state variable, let's assume it's named allCities.

There's an existing CommandInput for users to type their search.

There's likely some existing filtering logic that might be flawed.

Please implement the following precise logic in client/src/pages/natal-chart.tsx:

Create or Ensure useDebounce Hook:

If it doesn't exist, create a custom React hook named useDebounce in client/src/hooks/useDebounce.ts.

It must take value and delay as arguments and return the debouncedValue. Use a default delay of 300ms.

The hook's implementation should be:

// client/src/hooks/useDebounce.ts
import { useState, useEffect } from 'react';
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  useEffect(() => {
    const handler = setTimeout(() => { setDebouncedValue(value); }, delay);
    return () => { clearTimeout(handler); };
  }, [value, delay]);
  return debouncedValue;
}
Use code with caution.
TypeScript
State Management in NatalChartPageContent (or the relevant component):

Ensure there's a state variable allCities: City[] (where City is the type for your city objects, e.g., { id: number; name: string; country: string; adminName?: string; ... }) which is populated by the successful fetch from /api/cities.

Create a state variable citySearchInput: string, initialized to ''. This will store the live value from the CommandInput.

Use the useDebounce hook: const debouncedCitySearchTerm = useDebounce(citySearchInput, 300);.

Create a state variable isCitySearching: boolean, initialized to false.

Connecting CommandInput:

The CommandInput component's value prop must be bound to citySearchInput.

Its onValueChange prop (or equivalent for text changes) must call setCitySearchInput.

Filtering Logic (to generate citiesToDisplay):

This logic should run whenever debouncedCitySearchTerm or allCities changes (likely within the render function or a useMemo hook for performance).

The logic should be as follows:

const lowerDebouncedQuery = debouncedCitySearchTerm.trim().toLowerCase();
let citiesToDisplay: City[] = []; // Use your City type

if (!lowerDebouncedQuery) {
  // If search query is empty, show initial subset of all cities
  citiesToDisplay = (allCities || []).slice(0, 50);
} else {
  // If there is a search query, filter the ENTIRE allCities list
  citiesToDisplay = (allCities || [])
    .filter(city =>
      (city.name?.toLowerCase().includes(lowerDebouncedQuery)) ||
      (city.country?.toLowerCase().includes(lowerDebouncedQuery)) ||
      (city.adminName?.toLowerCase().includes(lowerDebouncedQuery)) // Optional: search admin_name
    )
    .slice(0, 100); // Limit the number of displayed results
}
Use code with caution.
TypeScript
Updating isCitySearching State:

Use a useEffect hook to manage isCitySearching:

useEffect(() => {
  if (citySearchInput.trim() !== '') {
    setIsCitySearching(true); // Start searching when user types
  }
}, [citySearchInput]);

useEffect(() => {
  // This effect runs when debouncedCitySearchTerm changes,
  // meaning the debounce period is over and filtering (based on it) will occur.
  if (citySearchInput.trim() !== '') { // Only stop 'searching' if there was an active search
     setIsCitySearching(false);
  } else {
     setIsCitySearching(false); // Also stop if input is cleared
  }
}, [debouncedCitySearchTerm, citySearchInput]); // Include citySearchInput to handle clearing
Use code with caution.
TypeScript
Rendering CommandList and CommandGroup:

Inside the CommandGroup:

First, handle loading state for allCities (e.g., if isLoadingCities is true, show a "Loading cities..." CommandItem).

Then, if citySearchInput.trim() !== '' && isCitySearching is true, display a single disabled CommandItem with the text "Searching cities..." (or a spinner icon).

Else (if not actively searching or input is empty), check if citiesToDisplay.length === 0 AND citySearchInput.trim() !== '' (meaning a search was performed but yielded no results). If so, render CommandEmpty ("No city found.").

Else, map over citiesToDisplay to render the CommandItems. Each CommandItem should have:

key={city.id}

value={city.id.toString()} (for the onSelect callback to receive the ID)

Display text: {city.name}, {city.country}

The existing onSelect logic to update selectedCityValue, setCityId, and close the popover.